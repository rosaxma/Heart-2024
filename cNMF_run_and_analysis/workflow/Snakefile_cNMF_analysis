import subprocess
import numpy as np
import math
import pandas as pd
import os

BioSampleConfigFile=config["SampleSheet"]
BioSamples_config = pd.read_table(BioSampleConfigFile, na_values="").fillna("None").set_index("Sample", drop=False)
BioSamples=list(BioSamples_config.index.values)



cnmf_k=config["cNMF"]["K"]
num_genes=str(config["cNMF"]["num_genes"])
density=str(config["cNMF"]["localDensity"]).replace(".", "_")

all_folders=[]
if config["cNMF"]["gene_list"]:
    all_folders.append("GeneList")
if config["cNMF"]["varGenes"]:
    all_folders.append("topGene"+ num_genes)


def getGeneIDdict(wildcards):
    return str(BioSamples_config.loc[wildcards.sample, "GeneIDdict"])

def getFeature(wildcards):
    return str(BioSamples_config.loc[wildcards.sample, "Features"])

def getNormCounts(wildcards):
    return str(BioSamples_config.loc[wildcards.sample, wildcards.folder+"_NormCounts"])

if config["cell_info"]["cell_info_table"] != "":
    ruleorder: topic_distribution_additional_info > topic_distribution
else:
    ruleorder: topic_distribution > topic_distribution_additional_info

rule all:
    input:
        expand(os.path.join(config["OutDir"], "combined_results", "{folder}_variance_explained_across_K_delta.pdf"), folder=all_folders),
        expand(os.path.join(config["OutDir"], "combined_results", "{folder}_pathway_enrichment_GO_delta.pdf"), folder=all_folders),
        expand(os.path.join(config["OutDir"], "combined_results", "{folder}_variance_explained_across_K.pdf"), folder=all_folders),
        expand(os.path.join(config["OutDir"], "combined_results", "{folder}_pathway_enrichment_GO.pdf"),folder=all_folders),
        expand(os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus" + density, "tables", "pathway_analysis", "K_{k}_GSEA_CardiacDisease_genes.txt"),sample=BioSamples, folder=all_folders, k=cnmf_k),
        expand(os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus" + density, "tables", "pathway_analysis", "K_{k}_GSEA_CHD_genes.txt"),sample=BioSamples, folder=all_folders, k=cnmf_k),
        pathway_plot = expand(os.path.join(config["OutDir"], "{sample}", "{folder}",  "{sample}_pathway_enrichment_hallmarkGeneSets.pdf"), sample=BioSamples, folder=all_folders),
        tpm_stats=expand(os.path.join(config["OutDir"], "{sample}", "{folder}", "{sample}_allK.tpm_stats.df.npz"),sample=BioSamples, folder=all_folders, k=cnmf_k),
        tpm_mtx=expand(os.path.join(config["OutDir"], "{sample}", "{folder}", "{sample}_allK.tpm.h5ad"),sample=BioSamples, folder=all_folders, k=cnmf_k),
        beta_distribution= expand(os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus" + density, "figures", "K_{k}_Beta_distribution.pdf"),sample=BioSamples, folder=all_folders, k=cnmf_k),
        uniquePathwayCount= expand(os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus" + density, "tables", "K_{k}_variance_explained.txt"),sample=BioSamples, folder=all_folders, k=cnmf_k),
        plot =expand(os.path.join(config["OutDir"], "{sample}", "{folder}",  "{sample}_variance_explained_across_K.pdf"),sample=BioSamples, folder=all_folders),
        distribution_job_complete = expand(os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus" + density, "tables", "distribution", "job_complete.tsv"),sample=BioSamples, folder=all_folders, k=cnmf_k),

rule rerun_cNMF_consensus:
    input: 
        merged_df=ancient(os.path.join(config["ScratchDir"], "cNMF", "{sample}", "{folder}", "{sample}_allK", "cnmf_tmp", "{sample}_allK.spectra.k_{k}.merged.df.npz")),
    output:
        consensus_npz=os.path.join(config["ScratchDir"], "cNMF", "{sample}", "{folder}", "{sample}_allK", "cnmf_tmp", "{sample}_allK.spectra.k_{k}.dt_" + density + ".consensus.df.npz"),
        spectra_tpm=os.path.join(config["ScratchDir"], "cNMF", "{sample}", "{folder}", "{sample}_allK", "cnmf_tmp", "{sample}_allK.gene_spectra_tpm.k_{k}.dt_" + density + ".df.npz")
    params:
        outdir=os.path.join(config["ScratchDir"], "cNMF", "{sample}", "{folder}"),
        name="{sample}_allK",
        local_density=config["cNMF"]["localDensity"],
        scriptdir=config["ScriptDir"],
    conda: config["cnmf_env"]
    resources:
        mem_gb=128,
        runtime_hr=24
    shell:
        """
        set +o pipefail;
        python {params.scriptdir}/modified.cnmf.py consensus \
            --output-dir {params.outdir} \
            --name {params.name} \
            --components {wildcards.k} \
            --local-density-threshold {params.local_density} \
            --show-clustering ;
        """

rule moveTPMStats_and_mtx:
    input: 
        tpm_stats=os.path.join(config["ScratchDir"], "cNMF", "{sample}", "{folder}", "{sample}_allK", "cnmf_tmp", "{sample}_allK.tpm_stats.df.npz"),
        tpm_mtx=os.path.join(config["ScratchDir"], "cNMF", "{sample}", "{folder}", "{sample}_allK", "cnmf_tmp", "{sample}_allK.tpm.h5ad"),
    output:
        tpm_stats=os.path.join(config["OutDir"], "{sample}", "{folder}", "{sample}_allK.tpm_stats.df.npz"),
        tpm_mtx=os.path.join(config["OutDir"], "{sample}", "{folder}", "{sample}_allK.tpm.h5ad"),
    resources:
        mem_gb=1,
        runtime_hr=1
    shell:
        """
        cp {input.tpm_stats} {output.tpm_stats}
        cp {input.tpm_mtx} {output.tpm_mtx}
        """


rule move_outputs:
    input:
        consensus_npz=os.path.join(config["ScratchDir"], "cNMF", "{sample}", "{folder}", "{sample}_allK", "cnmf_tmp", "{sample}_allK.spectra.k_{k}.dt_" + density + ".consensus.df.npz"),
    params:
        outdir=os.path.join(config["ScratchDir"], "cNMF", "{sample}", "{folder}", "{sample}_allK"),
        density_string=density,
        name="{sample}_allK",
        perm_dir=os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus"+density),
    output:
        spectra_consensus_npz=os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus"+density, "{sample}_allK.spectra.k_{k}.dt_" + density + ".consensus.df.npz"),
        usage_consensus_npz=os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus"+density, "{sample}_allK.usages.k_{k}.dt_" + density + ".consensus.df.npz"),
        spectra_tpm_npz=os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus"+density, "{sample}_allK.gene_spectra_tpm.k_{k}.dt_" + density + ".df.npz"),
        clustering=os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus"+ density,"{sample}_allK.clustering.k_{k}.dt_" + density + ".png"),
        spectra_consensus=os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus"+density, "{sample}_allK.spectra.k_{k}.dt_" + density + ".consensus.txt"),
        usage_consensus=os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus"+density, "{sample}_allK.usages.k_{k}.dt_" + density + ".consensus.txt"),
        spectra_tpm=os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus"+density, "{sample}_allK.gene_spectra_tpm.k_{k}.dt_" + density + ".txt"),
        spectra_score=os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus"+density, "{sample}_allK.gene_spectra_score.k_{k}.dt_" + density + ".txt"),
    resources:
        mem_gb=1,
        runtime_hr=1
    shell:
        """
        cp {params.outdir}/{params.name}*clustering*k_{wildcards.k}*{params.density_string}* {params.perm_dir};
        cp {params.outdir}/{params.name}*spectra*k_{wildcards.k}*{params.density_string}* {params.perm_dir};
        cp {params.outdir}/{params.name}*usages*k_{wildcards.k}*{params.density_string}* {params.perm_dir};
        cp {params.outdir}/cnmf_tmp/{params.name}*usages*k_{wildcards.k}*{params.density_string}*consensus.df.npz {params.perm_dir};
        cp {params.outdir}/cnmf_tmp/{params.name}*spectra*k_{wildcards.k}*{params.density_string}*consensus.df.npz {params.perm_dir};
        cp {params.outdir}/cnmf_tmp/{params.name}*spectra*tpm*k_{wildcards.k}*{params.density_string}*df.npz {params.perm_dir};
        """

rule runUMAP:
    input:
        SeuratObject = lambda wildcards: BioSamples_config.loc[wildcards.sample, "SeuratObject"],
    params:
        dims=config["UMAP_dims_upper_bound"],
        outdir=os.path.join(config["OutDir"], "{sample}"),
        scriptdir=config["ScriptDir"]
    output:
        SeuratUMAP = os.path.join(config["OutDir"], "{sample}", "seurat_umap.RDS")
    resources:
        mem_gb=64,
        runtime_hr=2
    conda:
        config["R_env"],
    shell:
        """
        Rscript {params.scriptdir}/runUMAP.R \
            --SeuratObject {input.SeuratObject} \
            --outdir {params.outdir} \
            --dims {params.dims}
        """

rule process_cNMF_output:
    input:
        SeuratObject = os.path.join(config["OutDir"], "{sample}", "seurat_umap.RDS"),
        clustering=os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus"+ density,"{sample}_allK.clustering.k_{k}.dt_" + density + ".png"),
    params:
        input_dir = os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus" + density),
        scriptdir=config["ScriptDir"],
        name="{sample}_allK",
        density=density,
        outdir=os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus" + density)
    output:
        beta_table = os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus" + density, 
        "tables", "beta_score_K_{k}_df_" + density + ".tsv"),
        usage_table = os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus" + density, 
        "tables", "gep_usages_K_{k}_df_" + density + ".tsv"),
        colored_umap=os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus" + density, 
        "figures", "GEP.expression.UMAP.pdf"),
    resources:
        mem_gb=32,
        runtime_hr=2
    conda:
        config["R_env"],
    shell:
        """
        Rscript {params.scriptdir}/process_cNMF_results.R \
            --SeuratObject {input.SeuratObject} \
            --input_dir {params.input_dir} \
            --name {params.name} \
            --numK {wildcards.k} \
            --density {params.density} \
            --outdir {params.outdir}
        """

rule topic_distribution:
    input:
        SeuratObject = os.path.join(config["OutDir"], "{sample}", "seurat_umap.RDS"),
        usage_table = os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus" + density, 
        "tables", "gep_usages_K_{k}_df_" + density + ".tsv"),
    params:
        scriptdir=config["ScriptDir"],
        feature = getFeature,
        outdir = os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus" + density, "tables", "distribution"),
    output:
        touch(os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus" + density, "tables", "distribution", "job_complete.tsv")),
    resources:
        mem_gb=20,
        runtime_hr=2
    conda:
        config["R_env"],
    shell:
        """
        mkdir -p {params.outdir};
        Rscript {params.scriptdir}/topic_distribution.R \
            --SeuratObject {input.SeuratObject} \
            --usageScoreTable {input.usage_table} \
            --features {params.feature} \
            --numK {wildcards.k} \
            --outdir {params.outdir}
        """


rule topic_distribution_additional_info:
    input:
        SeuratObject = os.path.join(config["OutDir"], "{sample}", "seurat_umap.RDS"),
        usage_table = os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus" + density, 
        "tables", "gep_usages_K_{k}_df_" + density + ".tsv"),
    params:
        cell_info=config["cell_info"]["cell_info_table"],
        scriptdir=config["ScriptDir"],
        feature = getFeature,
        outdir = os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus" + density, "tables", "distribution"),
        cbc_colname=config["cell_info"]["cbc_colname"],
        additional_metrics=",".join(config["cell_info"]["metrics"])
    output:
        touch(os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus" + density, "tables", "distribution", "job_complete.tsv")),
    resources:
        mem_gb=32,
        runtime_hr=2
    conda:
        config["R_env"],
    shell:
        """
        mkdir -p {params.outdir};
        Rscript {params.scriptdir}/topic_distribution.R \
            --SeuratObject {input.SeuratObject} \
            --usageScoreTable {input.usage_table} \
            --features {params.feature} \
            --numK {wildcards.k} \
            --outdir {params.outdir} \
            --additionalCellInfo {params.cell_info} \
            --cbc_colname {params.cbc_colname} \
            --additional_metrics {params.additional_metrics}
        """


rule find_elbow:
    input:
        beta_table = os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus" + density, 
        "tables", "beta_score_K_{k}_df_" + density + ".tsv"),
    params:
        scriptdir=config["ScriptDir"],
        outdir = os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus" + density, "tables")
    output:
        knee_table = os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus" + density, "tables", "cNMF_GEP_knee_K{k}.tsv")
    resources:
        mem_gb=8,
        runtime_hr=2
    conda:
        config["kneed_env"]
    shell:
        """
        python {params.scriptdir}/find_elbow.py \
            --betaScoreTable {input.beta_table} \
            --k {wildcards.k} \
            --outdir {params.outdir}
        """

rule plotBetaScores:
    input:
        beta_table = os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus" + density, 
        "tables", "beta_score_K_{k}_df_" + density + ".tsv"),
        knee_table = os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus" + density, "tables", "cNMF_GEP_knee_K{k}.tsv")
    params:
        scriptdir=config["ScriptDir"],
        outdir = os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus" + density)
    output:
        os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus" + density, "tables", "K_{k}_top100Genes_in_topics.tsv"),
        os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus" + density, "tables", "K_{k}_top200Genes_in_topics.tsv"),
        os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus" + density, "tables", "K_{k}_top300Genes_in_topics.tsv"),
        beta_top_genes = os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus" + density, "tables", "K_{k}_topGenes_in_topics.tsv"),
        beta_distribution= os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus" + density, "figures", "K_{k}_Beta_distribution.pdf")
    resources:
        mem_gb=4,
        runtime_hr=1
    conda:
        config["R_plot"],
    shell:
        """
        Rscript {params.scriptdir}/plotBetaScores.R \
            --betaScoreTable {input.beta_table} \
            --knees {input.knee_table} \
            --numK {wildcards.k} \
            --outdir {params.outdir} 
        """

rule pathway_analysis:
    input:
        beta_table = os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus" + density, "tables", "beta_score_K_{k}_df_" + density + ".tsv"),
        topGeneTable =  os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus" + density, "tables", "K_{k}_top300Genes_in_topics.tsv")
    params:
        scriptdir=config["ScriptDir"],
        GeneIDdict = getGeneIDdict,
        outdir = os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus" + density, "tables", "pathway_analysis"),
        topGenes2look = config["topGenes2look"]
    output:
        uniquePathwayCount= os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus" + density, "tables", "pathway_analysis", "K_{k}_uniquePathwayID_count.txt")
    resources:
        mem_gb=64,
        runtime_hr=5
    conda:
        config["R_env"],
    shell:
        """
        Rscript {params.scriptdir}/GO.R \
            --betaScoreTable {input.beta_table} \
            --topGeneTable {input.topGeneTable} \
            --GeneIDdict {params.GeneIDdict} \
            --numK {wildcards.k} \
            --outdir {params.outdir} \
            --topGenes2look {params.topGenes2look}
        """

rule plot_pathway_count:
    input:
        uniquePathwayCount= expand(os.path.join(config["OutDir"], "{{sample}}", "{{folder}}", "K{k}", "consensus" + density, "tables", "pathway_analysis", "K_{k}_uniquePathwayID_count.txt"), k=cnmf_k)
    params:
        uniquePathwayCount=",".join(expand(os.path.join(config["OutDir"], "{{sample}}", "{{folder}}", "K{k}", "consensus" + density, "tables", "pathway_analysis", "K_{k}_uniquePathwayID_count.txt"), k=cnmf_k)),
        scriptdir=config["ScriptDir"],
        outdir = os.path.join(config["OutDir"], "{sample}", "{folder}")
    output:
        pathway_plot=os.path.join(config["OutDir"], "{sample}", "{folder}",  "{sample}_pathway_enrichment_hallmarkGeneSets.pdf"),
        pathway_plot_GO=os.path.join(config["OutDir"], "{sample}", "{folder}",  "{sample}_pathway_enrichment_GO.pdf"),
        pathway_plot_GO_delta=os.path.join(config["OutDir"], "{sample}", "{folder}",  "{sample}_pathway_enrichment_GO_delta.pdf")
    resources:
        mem_gb=4,
        runtime_hr=1
    conda:
        config["R_env"],
    shell: 
        """
        Rscript {params.scriptdir}/plot_pathway_analysis.R \
            --pathwayCount {params.uniquePathwayCount} \
            --outdir {params.outdir} \
            --sample {wildcards.sample}
        """

rule mergePDF:
    input:
        pathway_plots = expand(os.path.join(config["OutDir"], "{sample}", "{{folder}}",  "{sample}_pathway_enrichment_GO.pdf"), sample=BioSamples),
        pathway_delta_plots = expand(os.path.join(config["OutDir"], "{sample}", "{{folder}}",  "{sample}_pathway_enrichment_GO_delta.pdf"), sample=BioSamples),
    output:
        pathway_pdf=os.path.join(config["OutDir"], "combined_results", "{folder}_pathway_enrichment_GO.pdf"),
        pathway_delta_pdf=os.path.join(config["OutDir"], "combined_results", "{folder}_pathway_enrichment_GO_delta.pdf")
    resources:
        mem_gb=4,
        runtime_hr=2
    run:
        from pypdf import PdfMerger
        merger= PdfMerger()
        merger_delta= PdfMerger()
        for pdf in input.pathway_plots:
            merger.append(pdf, pages=(0,1))
        for pdf in input.pathway_delta_plots:
            merger_delta.append(pdf, pages=(0,1))
        merger.write(output.pathway_pdf)
        merger_delta.write(output.pathway_delta_pdf)
        merger.close()
        merger_delta.close()

rule calculate_variance_explained:
    input:
        tpm_mtx=os.path.join(config["OutDir"], "{sample}", "{folder}", "{sample}_allK.tpm.h5ad"),
        spectra=os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus"+density, "{sample}_allK.gene_spectra_tpm.k_{k}.dt_" + density + ".df.npz"),
        usages=os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus"+density, "{sample}_allK.usages.k_{k}.dt_" + density + ".consensus.df.npz"),
    output:
         uniquePathwayCount= os.path.join(config["OutDir"], "{sample}", "{folder}", "K{k}", "consensus" + density, "tables", "K_{k}_variance_explained.txt")
    params:
        scriptdir=config["ScriptDir"],
    resources:
        mem_gb=256,
        runtime_hr=2
    conda:
        config["cnmf_env"],
    shell:
        """
        python {params.scriptdir}/variance_explained.py \
            --tpm {input.tpm_mtx} \
            --spectra_tpm {input.spectra} \
            --usage {input.usages} \
            -K {wildcards.k} \
            --output {output.uniquePathwayCount}
        """

rule plot_variance_explained:
    input:
        variance_explained = expand(os.path.join(config["OutDir"], "{{sample}}", "{{folder}}", "K{k}", "consensus" + density, "tables", "K_{k}_variance_explained.txt"), k=cnmf_k)
    params:
        variance_explained=",".join(expand(os.path.join(config["OutDir"], "{{sample}}", "{{folder}}", "K{k}", "consensus" + density, "tables", "K_{k}_variance_explained.txt"), k=cnmf_k)),
        scriptdir=config["ScriptDir"],
    output:
        plot=os.path.join(config["OutDir"], "{sample}", "{folder}",  "{sample}_variance_explained_across_K.pdf"),
        plot_delta=os.path.join(config["OutDir"], "{sample}", "{folder}",  "{sample}_variance_explained_across_K_delta.pdf"),
        table=os.path.join(config["OutDir"], "{sample}", "{folder}",  "variance_explained_across_K.tsv"),
        table_delta=os.path.join(config["OutDir"], "{sample}", "{folder}",  "variance_explained_across_K_delta.tsv"),
    resources:
        mem_gb=4,
        runtime_hr=1
    conda:
        config["R_env"],
    shell: 
        """
        Rscript {params.scriptdir}/plot_variance_explained.R \
            --varianceExplained {params.variance_explained} \
            --outputFigure {output.plot} \
            --outputFigure_delta {output.plot_delta} \
            --outputTable {output.table} \
            --outputTable_delta {output.table_delta} \
            --sample {wildcards.sample}
        """

rule mergePDF_variance:
    input:
        variance_plots = expand(os.path.join(config["OutDir"], "{sample}", "{{folder}}",  "{sample}_variance_explained_across_K.pdf"), sample=BioSamples),
        plot_delta=expand(os.path.join(config["OutDir"], "{sample}", "{{folder}}",  "{sample}_variance_explained_across_K_delta.pdf"),sample=BioSamples)
    output:
        variance_pdf=os.path.join(config["OutDir"], "combined_results", "{folder}_variance_explained_across_K.pdf"),
        variance_delta_pdf=os.path.join(config["OutDir"], "combined_results", "{folder}_variance_explained_across_K_delta.pdf")
    resources:
        mem_gb=4,
        runtime_hr=2
    run:
        from pypdf import PdfMerger
        merger= PdfMerger()
        merger_delta=PdfMerger()
        for pdf in input.variance_plots:
            merger.append(pdf, pages=(0,1))
        for pdf in input.plot_delta:
            merger_delta.append(pdf, pages=(0,1))
        merger.write(output.variance_pdf)
        merger.close()
        merger_delta.write(output.variance_delta_pdf)
        merger_delta.close()