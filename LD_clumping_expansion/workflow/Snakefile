import os
import pandas as pd
import subprocess
import numpy as np

BioSampleConfigFile=config["BioSampleTable"]
BioSamples_config = pd.read_table(BioSampleConfigFile, na_values="").fillna("None").set_index("trait", drop=False)
BioSamples=list(BioSamples_config.index.values)
print(BioSamples)

finemapped_table = pd.read_table(config["finemapped_table"], na_values="").fillna("None").set_index("Trait", drop=False)
finemapped_traits=list(finemapped_table.index.values)

OddsRatio_table = pd.read_table(config["odds_ratio_table"], na_values="").fillna("None").set_index("Trait", drop=False)
odds_ratio_traits=list(OddsRatio_table.index.values)
print(list(set(finemapped_traits) & set(BioSamples)))
############################################################################
def getCompleteSumStats(wildcards):
    return(OddsRatio_table.loc[wildcards.or_trait, "SumstatsPath"])
def getCalculate(wildcards):
    return(OddsRatio_table.loc[wildcards.or_trait, "calculateOdds"])
def getSNPCol(wildcards):
    return(OddsRatio_table.loc[wildcards.or_trait, "SNP"])
def getEffectSizeCol(wildcards):
    return(OddsRatio_table.loc[wildcards.or_trait, "Effect_size"])
def getCI(wildcards):
    return(OddsRatio_table.loc[wildcards.or_trait, "CI"])   
def getSumStats(wildcards):
    return(BioSamples_config.loc[wildcards.trait, "munged_sumstats"])
def getSource(wildcards):
    return(BioSamples_config.loc[wildcards.trait,"source"])
def get_varlist(wildcards):
    return(finemapped_table.loc[wildcards.fm_trait, "fine_mapped_table"])
def getLeadVariantCol(wildcards):
    return(finemapped_table.loc[wildcards.fm_trait, "LeadVariantCol"])
def getVariantCol(wildcards):
    return(finemapped_table.loc[wildcards.fm_trait, "VariantCol"])
def getChrCol(wildcards):
    return(finemapped_table.loc[wildcards.fm_trait, "ChrCol"])
def getPositionCol(wildcards):
    return(finemapped_table.loc[wildcards.fm_trait, "PosCol"])
def getLeadSNPPCol(wildcards):
    return(finemapped_table.loc[wildcards.fm_trait, "leadSNPPCol"])
def getVariantPCol(wildcards):
    return(finemapped_table.loc[wildcards.fm_trait, "variantPCol"])
def getLeadPIPCol(wildcards):
    return(finemapped_table.loc[wildcards.fm_trait, "leadPIPCol"])
def getPIPCol(wildcards):
    return(finemapped_table.loc[wildcards.fm_trait, "variantPIPCol"])
def getSource_finemap(wildcards):
    return(finemapped_table.loc[wildcards.fm_trait, "Source"])
############################################################################
from math import floor, log10
def sig_figs(x: float, precision: int):
    """
    Rounds a number to number of significant figures
    Parameters:
    - x - the number to be rounded
    - precision (integer) - the number of significant figures
    Returns:
    - float
    """

    x = float(x)
    precision = int(precision)
    if x !=0:
       return round(x, -int(floor(log10(abs(x)))) + (precision - 1))
    else: 
       return x

def get_size(file_path, unit='bytes'):
    file_size = os.path.getsize(file_path)
    exponents_map = {'bytes': 0, 'kb': 1, 'mb': 2, 'gb': 3}
    if unit not in exponents_map:
        raise ValueError("Must select from \
        ['bytes', 'kb', 'mb', 'gb']")
    else:
        size = file_size / 1024 ** exponents_map[unit]
        return round(size, 3)

def getResources(wildcards):
    path=getCompleteSumStats(wildcards)
    if get_size(path,unit="gb") < 1:
        return 32
    else:
        return 64

############################################################################
print(len(BioSamples))
print(len(finemapped_traits))
print(len(odds_ratio_traits))
rule all:
    input:
        os.path.join(config["outdir"], "all_traits_combined", "combined_beta_se_filtered.gz"),
        expand(os.path.join(config["outdir"],"{trait}", "{trait}_beta_se_filtered.gz"),trait=BioSamples),
        expand(os.path.join(config["outdir"],"{fm_trait}", "{fm_trait}_beta_se_filtered.gz"),fm_trait=finemapped_traits),
        #os.path.join(config["outdir"], "all_traits_combined", "combined_odds_ratio_filtered.gz"),
        #expand(os.path.join(config["outdir"],"{trait}", "{trait}_odds_ratio_filtered.gz"), trait=BioSamples),
        #expand(os.path.join(config["outdir"],"{fm_trait}", "{fm_trait}_odds_ratio_filtered.gz"), fm_trait=finemapped_traits),
        #expand(os.path.join(config["outdir"],"{or_trait}", "{or_trait}_odds_ratio.gz"),or_trait=odds_ratio_traits),
        os.path.join(config["outdir"], "all_traits_combined", "all_traits.variant.list.txt"),
        expand(os.path.join(config["outdir"],"{fm_trait}", "finemapped", "variant.list.txt"),fm_trait=finemapped_traits),
        expand(os.path.join(config["outdir"],"{trait}", "LD_expansion", "variant.list.txt"),trait=BioSamples),
        sumstats_p=expand(os.path.join(config["outdir"],"{trait}", "{trait}_sumstats.pvalue.gz"), trait=BioSamples),
        LD_clump=expand(os.path.join(config["outdir"],"{trait}", "combined_LD_clump.tsv"),trait=BioSamples),
        LeadSNPs=expand(os.path.join(config["outdir"],"{trait}", "LeadSNPs.tsv"),trait=BioSamples),
        combined_LD_expansion=expand(os.path.join(config["outdir"], "{trait}", "LD_expansion","combined_LD.txt"),trait=BioSamples),
        varList=expand(os.path.join(config["outdir"],"{trait}", "LD_expansion", "expanded.variant.txt"),trait=BioSamples),
        beta_se=expand(os.path.join(config["outdir"],"{or_trait}", "{or_trait}_beta_se.gz"),or_trait=odds_ratio_traits),


rule getBeta:
    input:
        sumstats=getCompleteSumStats
    params:
        calculate=getCalculate,
        SNP_col=getSNPCol,
        EffectSize=getEffectSizeCol,
        CI=getCI,
        munged_sumstats=config["MungedSumstats"],
        trait="{or_trait}"
    output:
        beta_se=os.path.join(config["outdir"],"{or_trait}", "{or_trait}_beta_se.gz"),
    resources:
        mem_gb=getResources,
        runtime_hr=3,
        partition="engreitz,normal,owners"
    run:
        import csv
        ref_df=pd.read_table(input.sumstats, header=0, sep="\t", index_col=False, quoting=csv.QUOTE_NONE)
        header=ref_df.columns
        header=[element.strip('"') for element in header]
        ref_df.columns = header
        
        if params.calculate == "T":
            munged_sum_df=pd.read_table(params.munged_sumstats, na_values="").fillna("None").set_index("Disease", drop=False)
            ref_df=ref_df.loc[:, [params.SNP_col, params.EffectSize, params.CI]]
            ref_df["Beta"] = ref_df[params.EffectSize]
            ref_df["StdErr"] = ref_df[params.CI]
            if params.trait in munged_sum_df.index:
                munged_sum_path=munged_sum_df.loc[params.trait,"StanfordSummaryStats"]
                print(munged_sum_path)
                munged_sum=pd.read_table(munged_sum_path, header=0, sep="\t", usecols=['SNP', 'A1','A2'], index_col="SNP", quoting=csv.QUOTE_NONE)
                ref_df=ref_df.join(munged_sum["A1"], on=params.SNP_col)
                ref_df=ref_df.join(munged_sum["A2"], on=params.SNP_col)
            else:
                ref_df = ref_df.assign(A1=None, A2=None)
        else:
            CI_colnames=params.CI.split(",")
            CI_colnames=[element.strip() for element in CI_colnames]
            colnames=[params.SNP_col, params.EffectSize]
            colnames.extend(CI_colnames)
            ref_df=ref_df.loc[:, colnames]
            ref_df = ref_df.assign(A1=None, A2=None)
            ref_df["Beta"] = np.log(ref_df[params.EffectSize])
            ref_df["StdErr"] = (ref_df[params.EffectSize]-ref_df[CI_colnames[0]])/(1.96*ref_df[params.EffectSize])
        ref_df=ref_df.loc[:, [params.SNP_col, "Beta", "StdErr", "A1", "A2"]]
        ref_df = ref_df.round(3)
        ref_df = ref_df.rename({params.SNP_col: 'rsid'}, axis='columns')  
        ref_df.to_csv(output.beta_se, sep="\t", header=True, index=False,compression='gzip')


#https://discourse.datamethods.org/t/odds-ratio-confidence-interval/1313
rule getOddsRatio:
    input:
        sumstats=getCompleteSumStats
    params:
        calculate=getCalculate,
        SNP_col=getSNPCol,
        EffectSize=getEffectSizeCol,
        CI=getCI,
        munged_sumstats=config["MungedSumstats"],
        trait="{or_trait}"
    output:
        odds_ratio=os.path.join(config["outdir"],"{or_trait}", "{or_trait}_odds_ratio.gz"),
    resources:
        mem_gb=getResources,
        runtime_hr=3,
        partition="engreitz,normal,owners"
    run:
        import csv
        ref_df=pd.read_table(input.sumstats, header=0, sep="\t", index_col=False, quoting=csv.QUOTE_NONE)
        header=ref_df.columns
        header=[element.strip('"') for element in header]
        ref_df.columns = header
        
        if params.calculate == "T":
            munged_sum_df=pd.read_table(params.munged_sumstats, na_values="").fillna("None").set_index("Disease", drop=False)
            ref_df=ref_df.loc[:, [params.SNP_col, params.EffectSize, params.CI]]
            ref_df["OR"] = np.exp(ref_df[params.EffectSize])
            ref_df["CI_lower"] = ref_df["OR"]-1.96*ref_df[params.CI]*ref_df["OR"]
            ref_df["CI_upper"] = ref_df["OR"]+1.96*ref_df[params.CI]*ref_df["OR"]
            if params.trait in munged_sum_df.index:
                munged_sum_path=munged_sum_df.loc[params.trait,"StanfordSummaryStats"]
                print(munged_sum_path)
                munged_sum=pd.read_table(munged_sum_path, header=0, sep="\t", usecols=['SNP', 'A1','A2'], index_col="SNP", quoting=csv.QUOTE_NONE)
                ref_df=ref_df.join(munged_sum["A1"], on=params.SNP_col)
                ref_df=ref_df.join(munged_sum["A2"], on=params.SNP_col)
            else:
                ref_df = ref_df.assign(A1=None, A2=None)
            ref_df=ref_df.loc[:, [params.SNP_col, "OR", "CI_lower", "CI_upper", "A1", "A2"]]
        else:
            CI_colnames=params.CI.split(",")
            CI_colnames=[element.strip() for element in CI_colnames]
            colnames=[params.SNP_col, params.EffectSize]
            colnames.extend(CI_colnames)
            ref_df=ref_df.loc[:, colnames]
            ref_df = ref_df.assign(A1=None, A2=None)
        ref_df = ref_df.round(3)
        ref_df = ref_df.rename({params.SNP_col: 'rsid'}, axis='columns')  
        ref_df.to_csv(output.odds_ratio, sep="\t", header=True, index=False,compression='gzip')

rule getPvalues:
    input:
        sumstats=getSumStats,
        SNP_reference=config["SNP_reference"]
    params:
        outdir=os.path.join(config["outdir"],"{trait}"),
        scratch_dir=os.path.join(config["scratch"],"{trait}"),
        trait="{trait}"
    output:
        sumstats_p=os.path.join(config["outdir"],"{trait}", "{trait}_sumstats.pvalue.gz"),
        sumstats_SNP=expand(os.path.join(config["scratch"],"{{trait}}", "{{trait}}_chr{chr}.SNP.tsv"),chr=range(1,23))
    resources:
        mem_gb=8,
        runtime_hr=3,
        partition="engreitz,normal,owners"
    run:
        ref=pd.read_table(input.SNP_reference, header=None, index_col=False)
        ref.columns=["chr", "start", "end", "rsid"]
        print(ref.head)
        ref = ref[["chr", "rsid"]]
        sumstats=pd.read_table(input.sumstats,header=0,index_col=False)
        sumstats=sumstats.dropna()
        import scipy.stats 
        if "P" not in list(sumstats.columns):
            sumstats["P"] = scipy.stats.norm.sf(abs(sumstats['Z']))*2
            sumstats["P"] = sumstats["P"].apply(lambda x: sig_figs(x, 4))
        sumstats.to_csv(output.sumstats_p, sep="\t", header=True, index=False,compression='gzip')
        sumstats=sumstats.merge(ref, how="inner", left_on="SNP", right_on="rsid")
        for chromosome in range(1,23):
            subset=sumstats[sumstats["chr"]=="chr"+str(chromosome)]
            subset.to_csv(os.path.join(params.scratch_dir, params.trait+"_chr"+str(chromosome)+".SNP.tsv"), sep="\t", header=True, index=False)
#LD clumping r values: https://software.broadinstitute.org/mpg/buhmbox/buhmbox_manual.html
rule LD_clumping:
    input:
        sumstats_SNP=expand(os.path.join(config["scratch"],"{{trait}}", "{{trait}}_chr{chr}.SNP.tsv"), chr=range(1,23))
    params:
        scratch_dir=os.path.join(config["scratch"],"{trait}"),
        trait="{trait}",
        REF=config["LD_expansion"]["LD_panel"]
    output:
        LD_clump=os.path.join(config["outdir"],"{trait}", "combined_LD_clump.tsv"),
    resources:
        mem_gb=8,
        runtime_hr=3,
        partition="engreitz,normal,owners"
    conda:
        config["envs"]["plink"]
    shell:
        """
        counter=0
        cd {params.scratch_dir}
        for CHR in $(seq 22)
        do
            assoc={params.trait}_chr${{CHR}}.SNP.tsv
            if [ -s ${{assoc}} ]; then 
                plink --bfile {params.REF}/1000G.EUR.QC.${{CHR}}.sorted \
                        --clump ${{assoc}} \
                        --clump-p1 5e-8 \
                        --clump-p2 0.01 \
                        --clump-r2 0.1 \
                        --out LD_clump_${{CHR}}
                if [ -s LD_clump_${{CHR}}.clumped ]; then
                    counter=$((counter+1))
                    if [[ "$counter" -eq 1 ]]; then
                        cat LD_clump_${{CHR}}.clumped|grep . > {output.LD_clump}
                    else
                        sed 1d LD_clump_${{CHR}}.clumped | grep . >> {output.LD_clump}
                    fi
                fi
            fi
        done
        if [[ "$counter" -eq 0 ]]; then
            touch {output.LD_clump}
        fi
        """

rule extract_LeadSNP:
    input:
        LD_clump=os.path.join(config["outdir"],"{trait}", "combined_LD_clump.tsv"),
    output:
        LeadSNPs=os.path.join(config["outdir"],"{trait}", "LeadSNPs.tsv"),
        LeadSNPs_byChr=expand(os.path.join(config["scratch"],"{{trait}}", "chr{chr}.LeadSNPs.tsv"),chr=range(1,23))
    params:
        outdir=os.path.join(config["outdir"],"{trait}"),
        scriptdir=config["scriptdir"],
        scratch=os.path.join(config["scratch"],"{trait}")
    resources:
        mem_gb=8,
        runtime_hr=3,
        partition="engreitz,normal,owners"
    conda:
        config["envs"]["r_4.2"]
    shell:
        """
        if [ -s {input.LD_clump} ]; then 
            Rscript {params.scriptdir}/extractLeadSNP.R \
                --LD_clump {input.LD_clump} \
                --outdir {params.outdir} \
                --scratchdir {params.scratch}
        else
            touch {output.LeadSNPs}
            for i in {output.LeadSNPs_byChr}
            do
                touch ${{i}}
            done
        fi
        """

rule LD_expansion:
    input:
        LeadSNPs_byChr=expand(os.path.join(config["scratch"],"{{trait}}", "chr{chr}.LeadSNPs.tsv"),chr=range(1,23))
    output:
        combined_LD_expansion=os.path.join(config["outdir"], "{trait}", "LD_expansion","combined_LD.txt")
    params:
        R2=config["LD_expansion"]["r2"],
        SNP_path=os.path.join(config["scratch"],"{trait}"),
        LD_path=os.path.join(config["scratch"],"{trait}"),
        trait="{trait}",
        REF=config["LD_expansion"]["LD_panel"]
    conda:
        config["envs"]["plink"]
    threads: 2
    resources:
        mem_gb=4,
        runtime_hr=12,
        partition="engreitz,normal,owners"
    shell:
        """
        cd {params.LD_path}
        echo CHR$'\t'LEADSNP_BP$'\t'LEADSNP$'\t'CHR_B$'\t'BP_B$'\t'SNP_B$'\t'R2 > {output.combined_LD_expansion}
        for CHR in $(seq 22)
        do
            SNP_list={params.SNP_path}/chr${{CHR}}.LeadSNPs.tsv
            if [ -s ${{SNP_list}} ]; then 
                plink --bfile {params.REF}/1000G.EUR.QC.${{CHR}}.sorted \
                --r2 \
                --ld-snp-list ${{SNP_list}} \
                --ld-window-kb 1000 \
                --ld-window 99999 \
                --ld-window-r2 {params.R2} \
                --threads {threads} \
                --out LD_expand_chr${{CHR}}
                sed 1d LD_expand_chr${{CHR}}.ld >> {output.combined_LD_expansion}
            fi
        done
        """

rule createVariantList:
    input:
        sumstats_p=os.path.join(config["outdir"],"{trait}", "{trait}_sumstats.pvalue.gz"),
        combined_LD_expansion=os.path.join(config["outdir"], "{trait}", "LD_expansion","combined_LD.txt")
    params:
        outdir=os.path.join(config["outdir"],"{trait}","LD_expansion"),
        trait="{trait}",
        scriptdir=config["scriptdir"]
    output:
        varList=os.path.join(config["outdir"],"{trait}", "LD_expansion", "expanded.variant.txt"),
    conda:
        config["envs"]["r_4.2"]
    resources:
        mem_gb=2,
        runtime_hr=1,
        partition="engreitz,normal,owners"
    shell:
        """
        Rscript {params.scriptdir}/CreateVariantList.R \
            --sumstats {input.sumstats_p} \
            --LD_expand {input.combined_LD_expansion} \
            --outdir {params.outdir} \
            --trait {params.trait}
        """

rule createCS_sumstats:
    input:
        varList=os.path.join(config["outdir"],"{trait}", "LD_expansion", "expanded.variant.txt"),
    output:
        varList_txt=os.path.join(config["outdir"],"{trait}", "LD_expansion", "variant.list.txt"),
        varList_bed=os.path.join(config["outdir"],"{trait}", "LD_expansion", "Variants.bed"),
        all_cs_txt=os.path.join(config["outdir"],"{trait}", "LD_expansion", "all.cs.txt"),
        all_cs_bed=os.path.join(config["outdir"],"{trait}", "LD_expansion", "CredibleSets.bed")
    params:
        scriptdir=config["scriptdir"], 
        outdir=os.path.join(config["outdir"],"{trait}","LD_expansion"),
        helperFunctions=config["CreateCS"]["HelperFunctions"],
        genes=config["CreateCS"]["Genes"],
        promoters=config["CreateCS"]["Promoters"],
        trait="{trait}",
        source=getSource
    conda:
        config["envs"]["r_4.2"]
    resources:
        mem_gb=4,
        runtime_hr=1,
        partition="engreitz,normal,owners"
    shell:
        """
        n_rows=`cat {input.varList} |wc -l`
        if [ ${{n_rows}} -gt 1 ]; then
            Rscript {params.scriptdir}/CreateCS.R \
                --helperFunctions {params.helperFunctions} \
                --fineMappedVariants {input.varList} \
                --genes {params.genes} \
                --promoters {params.promoters} \
                --trait {params.trait} \
                --outdir {params.outdir} \
                --leadVariantCol LocusID \
                --variantCol Variant \
                --chrCol Chr \
                --positionCol Position \
                --leadSNPPCol LeadSNP_P_value \
                --variantPCol variant_P_value \
                --LeadPIPCol None \
                --PIPCol None \
                --Source {params.source} \
                --zeroIndexed F \
                --excludeVariants None
        else
            touch {output.varList_txt}
            touch {output.varList_bed}
            touch {output.all_cs_txt}
            touch {output.all_cs_bed}
        fi
        """


rule createCS_sumstats_direct_input:
    input:
        varList=get_varlist
    output:
        varList_txt=os.path.join(config["outdir"],"{fm_trait}", "finemapped", "variant.list.txt"),
        varList_bed=os.path.join(config["outdir"],"{fm_trait}", "finemapped", "Variants.bed"),
        all_cs_txt=os.path.join(config["outdir"],"{fm_trait}", "finemapped", "all.cs.txt"),
        all_cs_bed=os.path.join(config["outdir"],"{fm_trait}", "finemapped", "CredibleSets.bed")
    params:
        scriptdir=config["scriptdir"], 
        outdir=os.path.join(config["outdir"],"{fm_trait}","finemapped"),
        helperFunctions=config["CreateCS"]["HelperFunctions"],
        genes=config["CreateCS"]["Genes"],
        promoters=config["CreateCS"]["Promoters"],
        trait="{fm_trait}",
        source=getSource_finemap,
        leadVariantCol=getLeadVariantCol,
        variantCol=getVariantCol,
        chrCol=getChrCol,
        positionCol=getPositionCol,
        leadSNPPCol=getLeadSNPPCol,
        variantPCol=getVariantPCol, 
        LeadPIPCol=getLeadPIPCol, 
        PIPCol=getPIPCol, 
    conda:
        config["envs"]["r_4.2"]
    resources:
        mem_gb=4,
        runtime_hr=1,
        partition="engreitz,normal,owners"
    shell:
        """
        n_rows=`cat {input.varList} |wc -l`
        if [ ${{n_rows}} -gt 1 ]; then
            Rscript {params.scriptdir}/CreateCS.R \
                --helperFunctions {params.helperFunctions} \
                --fineMappedVariants {input.varList} \
                --genes {params.genes} \
                --promoters {params.promoters} \
                --trait {params.trait} \
                --outdir {params.outdir} \
                --leadVariantCol {params.leadVariantCol} \
                --variantCol {params.variantCol} \
                --chrCol {params.chrCol} \
                --positionCol {params.positionCol} \
                --leadSNPPCol {params.leadSNPPCol} \
                --variantPCol {params.variantPCol} \
                --LeadPIPCol {params.LeadPIPCol} \
                --PIPCol {params.PIPCol} \
                --Source {params.source} \
                --zeroIndexed F \
                --excludeVariants None
        else
            touch {output.varList_txt}
            touch {output.varList_bed}
            touch {output.all_cs_txt}
            touch {output.all_cs_bed}
        fi
        """

rule subsetOddsRatios_fm:
    input:
        fm_var=os.path.join(config["outdir"],"{fm_trait}", "finemapped", "variant.list.txt"),
        odds_ratio=expand(os.path.join(config["outdir"],"{or_trait}", "{or_trait}_odds_ratio.gz"),or_trait=odds_ratio_traits)
    params:
        scriptdir=config["scriptdir"], 
        scratch_dir=os.path.join(config["scratch"]),
        outdir=os.path.join(config["outdir"])
    output:
        touch(os.path.join(config["outdir"],"{fm_trait}","finemap_{fm_trait}.log")),
        odds_ratio=os.path.join(config["outdir"],"{fm_trait}", "{fm_trait}_odds_ratio_filtered.gz")
    conda:
        config["envs"]["r_4.2"]
    resources:
        mem_gb=8,
        runtime_hr=1,
        partition="engreitz,normal,owners"
    shell:
        """
        if ! [ -s {input.fm_var} ]; then
            touch {output.odds_ratio}
        else
            Rscript {params.scriptdir}/subset_oddsRatio.R \
                --odds_ratio {params.outdir}/{wildcards.fm_trait}/{wildcards.fm_trait}_odds_ratio.gz \
                --variant_list {input.fm_var} \
                --trait {wildcards.fm_trait} \
                --outfile {output.odds_ratio}
        fi
        """

rule subsetBeta_fm:
    input:
        fm_var=os.path.join(config["outdir"],"{fm_trait}", "finemapped", "variant.list.txt"),
        beta_input=expand(os.path.join(config["outdir"],"{or_trait}", "{or_trait}_beta_se.gz"),or_trait=odds_ratio_traits)
    params:
        scriptdir=config["scriptdir"], 
        scratch_dir=os.path.join(config["scratch"]),
        outdir=os.path.join(config["outdir"])
    output:
        touch(os.path.join(config["outdir"],"{fm_trait}","finemap_{fm_trait}_beta.log")),
        beta=os.path.join(config["outdir"],"{fm_trait}", "{fm_trait}_beta_se_filtered.gz")
    conda:
        config["envs"]["r_4.2"]
    resources:
        mem_gb=8,
        runtime_hr=1,
        partition="engreitz,normal,owners"
    shell:
        """
        if ! [ -s {input.fm_var} ]; then
            touch {output.beta}
        else
            Rscript {params.scriptdir}/subset_BetaStdErr.R \
                --beta {params.outdir}/{wildcards.fm_trait}/{wildcards.fm_trait}_beta_se.gz \
                --variant_list {input.fm_var} \
                --trait {wildcards.fm_trait} \
                --outfile {output.beta}
        fi
        """

rule subsetOddsRatios_ld:
    input:
        ld_var=os.path.join(config["outdir"],"{trait}", "LD_expansion", "variant.list.txt"),
        odds_ratio=expand(os.path.join(config["outdir"],"{or_trait}", "{or_trait}_odds_ratio.gz"),or_trait=odds_ratio_traits)
    params:
        scriptdir=config["scriptdir"], 
        scratch_dir=os.path.join(config["scratch"]),
        outdir=os.path.join(config["outdir"])
    output:
        touch(os.path.join(config["outdir"],"{trait}","ld_expand_{trait}.log")),
        odds_ratio=os.path.join(config["outdir"],"{trait}", "{trait}_odds_ratio_filtered.gz")
    conda:
        config["envs"]["r_4.2"]
    resources:
        mem_gb=8,
        runtime_hr=1,
        partition="engreitz,normal,owners"
    shell:
        """
        if ! [ -s {input.ld_var} ]; then
            touch {output.odds_ratio}
        elif ! [ -s {params.outdir}/{wildcards.trait}/{wildcards.trait}_odds_ratio.gz ]; then
            touch {output.odds_ratio}
        else
            Rscript {params.scriptdir}/subset_oddsRatio.R \
                --odds_ratio {params.outdir}/{wildcards.trait}/{wildcards.trait}_odds_ratio.gz \
                --variant_list {input.ld_var} \
                --trait {wildcards.trait} \
                --outfile {output.odds_ratio}
        fi
        """


rule subsetBeta_ld:
    input:
        ld_var=os.path.join(config["outdir"],"{trait}", "LD_expansion", "variant.list.txt"),
        beta_input=expand(os.path.join(config["outdir"],"{or_trait}", "{or_trait}_beta_se.gz"),or_trait=odds_ratio_traits)
    params:
        scriptdir=config["scriptdir"], 
        scratch_dir=os.path.join(config["scratch"]),
        outdir=os.path.join(config["outdir"])
    output:
        touch(os.path.join(config["outdir"],"{trait}","ld_expand_{trait}_beta.log")),
        beta=os.path.join(config["outdir"],"{trait}", "{trait}_beta_se_filtered.gz")
    conda:
        config["envs"]["r_4.2"]
    resources:
        mem_gb=8,
        runtime_hr=1,
        partition="engreitz,normal,owners"
    shell:
        """
        if ! [ -s {input.ld_var} ]; then
            touch {output.beta}
        else
            Rscript {params.scriptdir}/subset_BetaStdErr.R \
                --beta {params.outdir}/{wildcards.trait}/{wildcards.trait}_beta_se.gz \
                --variant_list {input.ld_var} \
                --trait {wildcards.trait} \
                --outfile {output.beta}
        fi
        """

rule combined_Beta:
    input:
        expand(os.path.join(config["outdir"],"{fm_trait}","finemap_{fm_trait}_beta.log"), fm_trait=finemapped_traits),
        expand(os.path.join(config["outdir"],"{trait}","ld_expand_{trait}_beta.log"),trait=BioSamples)
    params:
        outdir=os.path.join(config["outdir"])
    output:
        combined_odds_ratio=os.path.join(config["outdir"], "all_traits_combined", "combined_beta_se_filtered.gz")
    resources:
        mem_gb=8,
        runtime_hr=1,
        partition="engreitz,normal,owners"
    shell:
        """
        counter=0
        for trait in {finemapped_traits}:
        do
            file={params.outdir}/${{trait}}/${{trait}}_beta_se_filtered.gz
            if [ -s ${{file}} ]; then
                counter=$((counter+1))
                if [ ${{counter}} -eq 1 ]; then
                    zcat ${{file}} |gzip -c > {output}
                else
                    zcat ${{file}} | sed 1d |gzip -c >> {output}
                fi
            fi
        done

        for trait in {BioSamples}
        do
            echo ${{trait}}
            file={params.outdir}/${{trait}}/${{trait}}_beta_se_filtered.gz
            echo ${{file}}
            if [ -s ${{file}} ]; then
                counter=$((counter+1))
                if [ ${{counter}} -eq 1 ]; then
                    zcat ${{file}} |gzip -c > {output}
                else
                    zcat ${{file}} | sed 1d |gzip -c >> {output}
                fi
            fi
        done

        """



rule combined_odds_ratios:
    input:
        expand(os.path.join(config["outdir"],"{fm_trait}","finemap_{fm_trait}.log"), fm_trait=finemapped_traits),
        expand(os.path.join(config["outdir"],"{trait}","ld_expand_{trait}.log"),trait=BioSamples)
    params:
        outdir=os.path.join(config["outdir"])
    output:
        combined_odds_ratio=os.path.join(config["outdir"], "all_traits_combined", "combined_odds_ratio_filtered.gz")
    resources:
        mem_gb=8,
        runtime_hr=1,
        partition="engreitz,normal,owners"
    shell:
        """
        counter=0
        for trait in {finemapped_traits}:
        do
            file={params.outdir}/${{trait}}/${{trait}}_odds_ratio_filtered.gz
            if [ -s ${{file}} ]; then
                counter=$((counter+1))
                if [ ${{counter}} -eq 1 ]; then
                    zcat ${{file}} |gzip -c > {output}
                else
                    zcat ${{file}} | sed 1d |gzip -c >> {output}
                fi
            fi
        done

        for trait in {BioSamples}
        do
            echo ${{trait}}
            file={params.outdir}/${{trait}}/${{trait}}_odds_ratio_filtered.gz
            echo ${{file}}
            if [ -s ${{file}} ]; then
                counter=$((counter+1))
                if [ ${{counter}} -eq 1 ]; then
                    zcat ${{file}} |gzip -c > {output}
                else
                    zcat ${{file}} | sed 1d |gzip -c >> {output}
                fi
            fi
        done

        """

rule combineVariants:
    input:
        varlists=expand(os.path.join(config["outdir"],"{fm_trait}", "finemapped", "variant.list.txt"),fm_trait=finemapped_traits)+expand(os.path.join(config["outdir"],"{trait}", "LD_expansion", "variant.list.txt"),trait=BioSamples),
        varList_beds=expand(os.path.join(config["outdir"],"{fm_trait}", "finemapped", "Variants.bed"),fm_trait=finemapped_traits)+expand(os.path.join(config["outdir"],"{trait}", "LD_expansion", "Variants.bed"),trait=BioSamples),
        cs_txts=expand(os.path.join(config["outdir"],"{fm_trait}", "finemapped", "all.cs.txt"),fm_trait=finemapped_traits)+expand(os.path.join(config["outdir"],"{trait}", "LD_expansion", "all.cs.txt"),trait=BioSamples),
        cs_beds=expand(os.path.join(config["outdir"],"{fm_trait}", "finemapped", "CredibleSets.bed"),fm_trait=finemapped_traits)+expand(os.path.join(config["outdir"],"{trait}", "LD_expansion", "CredibleSets.bed"),trait=BioSamples)
    params:
        outdir=os.path.join(config["outdir"], "all_traits_combined")
    output:
        all_varlists=os.path.join(config["outdir"], "all_traits_combined", "all_traits.variant.list.txt"),
        all_cs_txts=os.path.join(config["outdir"], "all_traits_combined", "all_traits.all.cs.txt"),
        all_varList_beds=os.path.join(config["outdir"], "all_traits_combined", "all_Variants.bed"),
        all_cs_beds=os.path.join(config["outdir"], "all_traits_combined", "all_CredibleSets.bed")
    resources:
        mem_gb=2,
        runtime_hr=5,
        partition="engreitz,normal,owners"
    conda:
        config["envs"]["r_4.2"]
    shell:
        """
        set +o pipefail;
        i=0
        for sample in {input.varlists}
        do 
            if [ $i -eq 0 ]
            then
                cat $sample > {output.all_varlists}
            else
                sed 1d $sample |sort|uniq >> {output.all_varlists}
            fi
            ((i=i+1))
        done
        i=0
        for sample in {input.cs_txts}
        do 
            if [ $i -eq 0 ]
            then
                cat $sample > {output.all_cs_txts}
            else
                sed 1d $sample |sort|uniq>> {output.all_cs_txts}
            fi
            ((i=i+1))
        done
        touch {output.all_varList_beds}
        for sample in {input.varList_beds}
        do 
            cat $sample |sort|uniq >> {output.all_varList_beds}
        done
        touch {output.all_cs_beds}
        for sample in {input.cs_beds}
        do 
            cat $sample|sort|uniq  >> {output.all_cs_beds}
        done
        """


        
